#!/usr/bin/env python
PACKAGE = "mavros_extras"
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

group_main = gen.add_group("a_main")
group_main.add("send_vision_velocities",        bool_t,   0, "", True)
group_main.add("send_vision_pose_estimate",     bool_t,   0, "", True)
group_main.add("send_vision_pose_delta",        bool_t,   0, "", False)
group_main.add("viso_frame_id",                 str_t,    0, "", "odom_ned")
group_main.add("viso_child_frame_id",           str_t,    0, "", "base_link")
group_main.add("publish_debug_pose_estimate",   bool_t,   0, "", False)

glitch_metric_types = gen.enum(
    [   gen.const("x_axis",     int_t, 0, "Glitch detections are driven by translational differences between odometer poses along the X-axis only"),
        gen.const("y_axis",     int_t, 1, "Glitch detections are driven by translational differences between odometer poses along the Y-axis only"),
        gen.const("z_axis",     int_t, 2, "Glitch detections are driven by translational differences between odometer poses along the Z-axis only"),
        gen.const("2d_euclidean_distance",int_t, 3, "Glitch detections are driven by the 2D Euclidean distance between poses"),
        gen.const("3d_euclidean_distance",int_t, 4, "Glitch detections are driven by the 3D Euclidean distance between poses")], "Different metrics that can be used for checking if a pose glitch has occurred.")

group_glitch = gen.add_group("b_glitch_detect")
group_glitch.add("pose_glitch_detect_method",   int_t,    0, "Metric used to determine if a pose glitch occurred", 3, 0, 4, edit_method=glitch_metric_types)
group_glitch.add("do_pose_glitch_checking",     bool_t,   0, "", True)
group_glitch.add("glitch_dist_thresh_min_err",  double_t, 0, "",  0.1, 0,   1000.0)
group_glitch.add("glitch_dist_thresh_mid_err",  double_t, 0, "",  0.25, 0,   1000.0)
group_glitch.add("glitch_dist_thresh_max_err",  double_t, 0, "",  0.5, 0,   1000.0)
# group_glitch.add("glitch_dist_thresh_min_err",  double_t, 0, "",  0.05, 0,   1000.0)
# group_glitch.add("glitch_dist_thresh_mid_err",  double_t, 0, "",  0.1, 0,   1000.0)
# group_glitch.add("glitch_dist_thresh_max_err",  double_t, 0, "",  0.5, 0,   1000.0)

group_pdelta = gen.add_group("c_pose_delta")
group_pdelta.add("default_confidence",            double_t, 0, "",  50.0, 0,   100.0)
group_pdelta.add("max_confidence",                double_t, 0, "",  95.0, 0,   100.0)
group_pdelta.add("good_health_thresh",            double_t, 0, "",  0.001, 0,   1000.0)
group_pdelta.add("bad_health_thresh",             double_t, 0, "",  1000.0, 0,  1000.0)
group_pdelta.add("min_glitch_confidence",         double_t, 0, "",  80.0, 0,   100.0)
group_pdelta.add("mid_glitch_confidence",         double_t, 0, "",  60.0, 0,   100.0)

group_misc = gen.add_group("d_misc")
group_misc.add("roll_offset",                   double_t, 0, "",  0.0, -180.0,   180.0)
group_misc.add("pitch_offset",                  double_t, 0, "",  0.0, -180.0,   180.0)
group_misc.add("yaw_offset",                    double_t, 0, "",  -90.0, -180.0,   180.0)

group_dbg = gen.add_group("e_debug")
group_dbg.add("debug_covariances",              bool_t, 0, "",  False)
group_dbg.add("debug_positions",                bool_t, 0, "",  True)
group_dbg.add("debug_velocities",               bool_t, 0, "",  True)
group_dbg.add("debug_deltas",                   bool_t, 0, "",  True)
group_dbg.add("debug_mavlink",                  bool_t, 0, "",  True)

group_test = gen.add_group("f_experimental")
group_test.add("test_position_offset_corrections",     bool_t, 0, "",  True)
group_test.add("test_velocity_offset_corrections",     bool_t, 0, "",  True)

exit(gen.generate(PACKAGE, "mavros_extras", "VisualOdometerInterfacePlugin"))
